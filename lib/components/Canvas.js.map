{"version":3,"sources":["../../src/components/Canvas.jsx"],"names":["PropTypes","PROFILE","AMOUNT","WIDTH","HEIGHT","STYLES","backgroundColor","position","top","left","createClass","propTypes","width","number","height","style","object","amount","profile","array","ctx","dynamicX","draw","particles","startAngle","endAngle","Math","PI","antiClockwise","props","type","clearRect","forEach","deltaX","particle","deltaY","color","radius","opacity","deltaOpacity","x","y","fillStyle","globalAlpha","beginPath","arc","fill","closePath","init","animate","window","requestAnimationFrame","bind","componentDidMount","render","styles","canvas","getContext"],"mappings":"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","file":"Canvas.js","sourcesContent":["import React from 'react';\nimport { generateParticles, updateParticles } from '../utils/particle';\n\nconst PropTypes = React.PropTypes;\n\nconst PROFILE = [ 'snow', 'steady' ];\nconst AMOUNT = 800;\nconst WIDTH = 600;\nconst HEIGHT = 300;\nconst STYLES = {\n\tbackgroundColor: '#0A2933',\n\tposition: 'absolute',\n\ttop: '0',\n\tleft: '0'\n};\n\nexport default React.createClass({\n\n\tpropTypes: {\n\t\twidth: PropTypes.number,\n\t\theight: PropTypes.number,\n\t\tstyle: PropTypes.object,\n\t\tamount: PropTypes.number,\n\t\tprofile: PropTypes.array\n\t},\n\n\t/**\n\t * Canvas context.\n\t *\n\t * @type {object}\n\t *\n\t * @see `render()`\n\t */\n\tctx: null,\n\n\t/**\n\t * Dynamic particle x coordinate value, determined by the mouse\n\t * cursor position.\n\t *\n\t * @type {number}\n\t *\n\t * @see `handleMouseMove()`\n\t */\n\tdynamicX: 1,\n\n\t/**\n\t * Draws particles on the canvas by continiously updating the\n\t * particle values.\n\t *\n\t * @param  {array} particles - particle Objects to be rendered\n\t */\n\tdraw (particles) {\n\n\t\t/**\n\t\t * Note that angles are measured in radians:\n\t\t *\n\t\t * radians = (Math.PI / 180) * degrees\n\t\t */\n\t\tconst startAngle = 0;\n\t\tconst endAngle = 2 * Math.PI; // 360 degrees in radians\n\t\tconst antiClockwise = true;\n\t\tconst { ctx, dynamicX } = this;\n\t\tconst {\n\t\t\twidth = WIDTH,\n\t\t\theight = HEIGHT,\n\t\t\tprofile = PROFILE\n\t\t} = this.props;\n\t\tconst [ type ] = profile;\n\n\t\t// Clear the canvas context before updating and animating the particles.\n\t\tctx.clearRect(0, 0, width, height);\n\n\t\t// Updates the particle values before (re) drawing to create an animation on the canvas.\n\t\tparticles.forEach(particle => {\n\t\t\tconst {\n\t\t\t\tdeltaX,\n\t\t\t\tdeltaY,\n\t\t\t\tcolor,\n\t\t\t\tradius,\n\t\t\t\topacity,\n\t\t\t\tdeltaOpacity\n\t\t\t} = particle;\n\n\t\t\t// Update particle values before animating.\n\t\t\tparticle.x += deltaX + 1.33 * dynamicX;\n\t\t\tparticle.y += deltaY;\n\n\t\t\t// Update particle opacity based on particle type.\n\t\t\tswitch (type) {\n\t\t\t\tcase 'snow': {\n\t\t\t\t\tparticle.opacity = opacity;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase 'confetti': {\n\t\t\t\t\tif (particle.opacity <= 0) {\n\t\t\t\t\t\tparticle.opacity += deltaOpacity;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (particle.opacity > 0) {\n\t\t\t\t\t\tparticle.opacity -= deltaOpacity;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Style the particles.\n\t\t\tctx.fillStyle = color;\n\t\t\tctx.globalAlpha = particle.opacity;\n\n\t\t\t// Animate the particles.\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(particle.x, particle.y, radius, startAngle, endAngle, antiClockwise);\n\t\t\tctx.fill();\n\t\t\tctx.closePath();\n\n\t\t\t// Re initialize the particle when it falls out of the view port.\n\t\t\tif (particle.y > height) {\n\t\t\t\tparticle.init();\n\t\t\t}\n\t\t});\n\n\t\tthis.animate(particles);\n\t},\n\n\t/**\n\t * Animate by drawing all particles.\n\t *\n\t * @param  {array} particles - particle Objects to be rendered\n\t */\n\tanimate (particles) {\n\t\twindow.requestAnimationFrame( this.draw.bind(this, particles) );\n\t},\n\n\n\tcomponentDidMount () {\n\t\tconst {\n\t\t\tprofile = PROFILE,\n\t\t\tamount = AMOUNT,\n\t\t\twidth = WIDTH,\n\t\t\theight = HEIGHT\n\t\t} = this.props;\n\n\t\tconst particles = generateParticles(profile, amount, { width, height });\n\n\t\tthis.animate(particles);\n\t},\n\n\trender () {\n\t\tconst {\n\t\t\twidth = WIDTH,\n\t\t\theight = HEIGHT,\n\t\t\tstyles = STYLES\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<canvas\n\t\t\t\tid=\"react-snowfetti\"\n\t\t\t\twidth={ width }\n\t\t\t\theight={ height }\n\t\t\t\tstyle={ styles }\n\t\t\t\tref={ (canvas) => { if(canvas) { this.ctx = canvas.getContext('2d') } } }\n\t\t\t>\n\t\t\t\t<h3>\n\t\t\t\t\tOh no! You do not have support for the html5 canvas API!\n\t\t\t\t</h3>\n\t\t\t</canvas>\n\t\t);\n\t}\n});\n"]}