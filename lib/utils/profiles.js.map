{"version":3,"sources":["../../src/utils/profiles.js"],"names":["getParticleValues","random","Math","floor","_getRandomPaletteColor","palette","i","length","TYPES","snow","color","radius","opacity","confetti","generate","deltaOpacity","VELOCITIES","slow","deltaX","deltaY","steady","fast","type","velocity","Object","assign"],"mappings":";;;;;;;;QAuHgBA,iB,GAAAA,iB;;AAvHhB;;;;;;IAEQC,M,GAAkBC,I,CAAlBD,M;IAAQE,K,GAAUD,I,CAAVC,K;;AAEhB;;;;;;;;;;;AAUA,SAASC,sBAAT,CAAgCC,OAAhC,EAAyC;AACxC,KAAIC,IAAIH,MAAOF,WAAWI,QAAQE,MAA1B,CAAR;;AAEA,QAAOF,QAAQC,CAAR,CAAP;AACA;;AAED;;;;;AAKA,IAAME,QAAQ;;AAEb;;;;;;;AAOAC,KATa,gBASPJ,OATO,EASE;AACd,MAAIK,QAAQL,WAAWA,QAAQE,MAAnB,GACXH,uBAAuBC,OAAvB,CADW,GAEX,MAFD;;AAIA,SAAO;AACNK,eADM;AAENC,WAAQ,MAAMV,WAAW,CAFnB;AAGNW,YAAS,MAAMX,WAAW;AAHpB,GAAP;AAKA,EAnBY;;;AAqBb;;;;;;;AAOAY,SA5Ba,oBA4BHR,OA5BG,EA4BM;AAClB,MAAIK,QAAQL,WAAWA,QAAQE,MAAnB,GACXH,uBAAuBC,OAAvB,CADW,GAEX,oBAAUS,QAAV,EAFD;;AAIA,SAAO;AACNJ,eADM;AAENC,WAAQ,MAAMV,WAAW,CAFnB;AAGNW,YAAS,CAHH;AAING,iBAAc,OAAOd;AAJf,GAAP;AAMA;AAvCY,CAAd;;AA0CA;;;;;AAKA,IAAMe,aAAa;;AAElB;;;;;AAKAC,KAPkB,kBAOV;AACP,SAAO;AACNC,WAAQ,OAAOjB,QADT;AAENkB,WAAQ,OAAOlB,WAAW;AAFpB,GAAP;AAIA,EAZiB;;;AAclB;;;;;AAKAmB,OAnBkB,oBAmBR;AACT,SAAO;AACNF,WAAQ,OAAOjB,QADT;AAENkB,WAAQ,MAAMlB,WAAW,GAAjB,GAAuBA,WAAW;AAFpC,GAAP;AAIA,EAxBiB;;;AA0BlB;;;;;AAKAoB,KA/BkB,kBA+BV;AACP,SAAO;AACNH,WAAQ,OAAOjB,QADT;AAENkB,WAAQ,MAAMlB,WAAW,GAAjB,GAAuBA,WAAW;AAFpC,GAAP;AAIA;AApCiB,CAAnB;;AAuCA;;;;;;;;AAQO,SAASD,iBAAT,OAIJ;AAAA;;AAAA;AAAA,KAHFsB,IAGE,0BAHK,MAGL;AAAA;AAAA,KAFFC,QAEE,2BAFS,MAET;AAAA;AAAA,KADFlB,OACE,2BADQ,EACR;;AACF,QAAOmB,OAAOC,MAAP,CACN,EADM,EAENjB,MAAMc,IAAN,EAAYjB,OAAZ,CAFM,EAGNW,WAAWO,QAAX,GAHM,CAAP;AAKA","file":"profiles.js","sourcesContent":["import randomHex from 'random-hex';\n\nconst { random, floor } = Math;\n\n/**\n * Retrieves a random color from the supplied color\n * palette.\n *\n * @private\n *\n * @param  {array} palette - contains hex color strings\n *\n * @return {string} random hex color code\n */\nfunction _getRandomPaletteColor(palette) {\n\tlet i = floor( random() * palette.length );\n\n\treturn palette[i];\n}\n\n/**\n * Hash map of particle types.\n *\n * @type {Object}\n */\nconst TYPES = {\n\n\t/**\n\t * Retrieves the visual values of a `snow` particle.\n\t *\n\t * @param  {array} palette - optional hex color strings\n\t *\n\t * @return {object} snow particle values.\n\t */\n\tsnow (palette) {\n\t\tlet color = palette && palette.length ?\n\t\t\t_getRandomPaletteColor(palette) :\n\t\t\t'#fff';\n\n\t\treturn {\n\t\t\tcolor,\n\t\t\tradius: 0.4 + random() * 2,\n\t\t\topacity: 0.5 + random() * 0.5\n\t\t}\n\t},\n\n\t/**\n\t * Retrieves the visual values of a `confetti` particle.\n\t *\n\t * @param  {array} palette - optional hex color strings\n\t *\n\t * @return {object} confetti particle values.\n\t */\n\tconfetti (palette) {\n\t\tlet color = palette && palette.length ?\n\t\t\t_getRandomPaletteColor(palette) :\n\t\t\trandomHex.generate();\n\n\t\treturn {\n\t\t\tcolor,\n\t\t\tradius: 0.2 + random() * 4,\n\t\t\topacity: 1,\n\t\t\tdeltaOpacity: 0.05 * random()\n\t\t}\n\t},\n};\n\n/**\n * Hash map of particle velocity types.\n *\n * @type {Object}\n */\nconst VELOCITIES = {\n\n\t/**\n\t * Retrieves the kinetic values of a `slow` particle.\n\t *\n\t * @return {object} kinetic particle values.\n\t */\n\tslow () {\n\t\treturn {\n\t\t\tdeltaX: 0.35 - random(),\n\t\t\tdeltaY: 0.15 + random() * 1.1\n\t\t};\n\t},\n\n\t/**\n\t * Retrieves the kinetic values of a `steady` particle.\n\t *\n\t * @return {object} kinetic particle values.\n\t */\n\tsteady () {\n\t\treturn {\n\t\t\tdeltaX: 0.25 - random(),\n\t\t\tdeltaY: 0.8 + random() * 0.4 + random() * 2\n\t\t};\n\t},\n\n\t/**\n\t * Retrieves the kinetic values of a `fast` particle.\n\t *\n\t * @return {object} kinetic particle values.\n\t */\n\tfast () {\n\t\treturn {\n\t\t\tdeltaX: 0.25 - random(),\n\t\t\tdeltaY: 1.1 + random() * 0.4 + random() * 2\n\t\t};\n\t}\n};\n\n/**\n * Retrieves all particle values denoted by a specific\n * profile.\n *\n * @param  {array} profile - contains `type`, `velocity` and optional `palette`\n *\n * @return {object} contains all particle values\n */\nexport function getParticleValues([\n\ttype = 'snow',\n\tvelocity = 'slow',\n\tpalette = []\n]) {\n\treturn Object.assign(\n\t\t{},\n\t\tTYPES[type](palette),\n\t\tVELOCITIES[velocity]()\n\t);\n};\n"]}