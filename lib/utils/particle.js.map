{"version":3,"sources":["../../src/utils/particle.js"],"names":["generateParticles","_createParticle","profile","width","height","random","Math","deltaX","deltaY","deltaOpacity","radius","color","opacity","init","x","y","amount","bounds","particles","particle","push"],"mappings":";;;;;QAiDgBA,iB,GAAAA,iB;;AAjDhB;;AAEA;;;;;;;;;;AAUA,SAASC,eAAT,CAAyBC,OAAzB,QAAqD;AAAA,KAAjBC,KAAiB,QAAjBA,KAAiB;AAAA,KAAVC,MAAU,QAAVA,MAAU;AAAA,KAC5CC,MAD4C,GACjCC,IADiC,CAC5CD,MAD4C;;AAAA,0BAShD,iCAAkBH,OAAlB,CATgD;;AAAA,KAGnDK,MAHmD,sBAGnDA,MAHmD;AAAA,KAInDC,MAJmD,sBAInDA,MAJmD;AAAA,KAKnDC,YALmD,sBAKnDA,YALmD;AAAA,KAMnDC,MANmD,sBAMnDA,MANmD;AAAA,KAOnDC,KAPmD,sBAOnDA,KAPmD;AAAA,KAQnDC,OARmD,sBAQnDA,OARmD;;;AAWpD,QAAO;AACNC,MADM,kBACC;AACN,QAAKC,CAAL,GAAST,WAAWF,KAApB;AACA,QAAKY,CAAL,GAASV,WAAW,CAACD,MAArB;AACA,QAAKG,MAAL,GAAcA,MAAd;AACA,QAAKC,MAAL,GAAcA,MAAd;AACA,QAAKG,KAAL,GAAaA,KAAb;AACA,QAAKD,MAAL,GAAcA,MAAd;AACA,QAAKE,OAAL,GAAeA,OAAf;AACA,QAAKH,YAAL,GAAoBA,YAApB;;AAEA,UAAO,IAAP;AACA;AAZK,EAAP;AAcA;;AAED;;;;;;;;;;AAUO,SAAST,iBAAT,CAA2BE,OAA3B,EAAoCc,MAApC,EAA4CC,MAA5C,EAAoD;AAC1D,KAAMC,YAAY,EAAlB;;AAEA,QAAOF,QAAP,EAAiB;AAChB,MAAIG,WAAWlB,gBAAgBC,OAAhB,EAAyBe,MAAzB,CAAf;;AAEAE,WAASN,IAAT;AACAK,YAAUE,IAAV,CAAeD,QAAf;AACA;;AAED,QAAOD,SAAP;AACA","file":"particle.js","sourcesContent":["import { getParticleValues } from '../utils/profiles';\n\n/**\n * Create a single particle Object.\n *\n * @private\n *\n * @param  {array}  profile - particle profile that contains type and velocity\n * @param  {object} bounds  - canvas width and height\n *\n * @return {object} particle Object\n */\nfunction _createParticle(profile, { width, height }) {\n\tconst { random } = Math;\n\tconst {\n\t\tdeltaX,\n\t\tdeltaY,\n\t\tdeltaOpacity,\n\t\tradius,\n\t\tcolor,\n\t\topacity\n\t} = getParticleValues(profile);\n\n\treturn {\n\t\tinit() {\n\t\t\tthis.x = random() * width;\n\t\t\tthis.y = random() * -height;\n\t\t\tthis.deltaX = deltaX;\n\t\t\tthis.deltaY = deltaY;\n\t\t\tthis.color = color;\n\t\t\tthis.radius = radius;\n\t\t\tthis.opacity = opacity;\n\t\t\tthis.deltaOpacity = deltaOpacity;\n\n\t\t\treturn this;\n\t\t}\n\t};\n}\n\n/**\n * Generates a specific amount of particles to be rendered\n * on the canvas based on the specified particle profile.\n *\n * @param  {array}  profile - particle profile that contains type and velocity\n * @param  {number} amount  - the amount of particles to be rendered\n * @param  {object} bounds  - canvas width and height\n *\n * @return {array} particle Objects to be rendered\n */\nexport function generateParticles(profile, amount, bounds) {\n\tconst particles = [];\n\n\twhile (amount--) {\n\t\tlet particle = _createParticle(profile, bounds);\n\n\t\tparticle.init();\n\t\tparticles.push(particle);\n\t}\n\n\treturn particles;\n}\n"]}